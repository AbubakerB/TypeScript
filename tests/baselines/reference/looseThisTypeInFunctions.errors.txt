tests/cases/conformance/types/thisType/looseThisTypeInFunctions.ts(20,1): error TS2322: Type '(this: C, m: number) => number' is not assignable to type '(m: number) => number'.
  Types of parameters 'this' and 'this' are incompatible.
    Type 'void' is not assignable to type 'C'.
tests/cases/conformance/types/thisType/looseThisTypeInFunctions.ts(27,9): error TS2345: Argument of type 'void' is not assignable to parameter of type 'I'.


==== tests/cases/conformance/types/thisType/looseThisTypeInFunctions.ts (2 errors) ====
    interface I {
        explicitThis(this: this, m: number): number;
    }
    interface Unused {
        implicitNoThis(m: number): number;
    }
    class C implements I {
        n: number;
        explicitThis(this: this, m: number): number {
            return this.n + m;
        }
        implicitThis(m: number): number {
            return this.n + m;
        }
        explicitVoid(this: void, m: number): number {
            return m + 1;
        }
    }
    let c = new C();
    c.explicitVoid = c.explicitThis; // error, 'void' is missing everything
    ~~~~~~~~~~~~~~
!!! error TS2322: Type '(this: C, m: number) => number' is not assignable to type '(m: number) => number'.
!!! error TS2322:   Types of parameters 'this' and 'this' are incompatible.
!!! error TS2322:     Type 'void' is not assignable to type 'C'.
    let o = { 
        explicitThis: function (m) { return m },
    	implicitThis(m: number): number { return m } 
    };
    let i: I = o;
    let x = i.explicitThis;
    let n = x(12); // callee:void doesn't match this:I
            ~~~~~
!!! error TS2345: Argument of type 'void' is not assignable to parameter of type 'I'.
    let u: Unused;
    let y = u.implicitNoThis;
    n = y(12); // ok, callee:void matches this:any
    c.explicitVoid = c.implicitThis // ok, implicitThis(this:any)
    o.implicitThis = c.implicitThis; // ok, implicitThis(this:any)
    o.implicitThis = c.explicitThis; // ok, implicitThis(this:any) is assignable to explicitThis(this: this)
    o.implicitThis = i.explicitThis;
    