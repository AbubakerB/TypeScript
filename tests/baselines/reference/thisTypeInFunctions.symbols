=== tests/cases/conformance/types/thisType/thisTypeInFunctions.ts ===
// body checking
class C {
>C : Symbol(C, Decl(thisTypeInFunctions.ts, 0, 0))

    n: number;
>n : Symbol(n, Decl(thisTypeInFunctions.ts, 1, 9))

    explicitThis(this: this, m: number): number {
>explicitThis : Symbol(explicitThis, Decl(thisTypeInFunctions.ts, 2, 14))
>this : Symbol(this, Decl(thisTypeInFunctions.ts, 3, 17))
>m : Symbol(m, Decl(thisTypeInFunctions.ts, 3, 28))

        return this.n + m;
>this.n : Symbol(n, Decl(thisTypeInFunctions.ts, 1, 9))
>this : Symbol(C, Decl(thisTypeInFunctions.ts, 0, 0))
>n : Symbol(n, Decl(thisTypeInFunctions.ts, 1, 9))
>m : Symbol(m, Decl(thisTypeInFunctions.ts, 3, 28))
    }
    implicitThis(m: number): number {
>implicitThis : Symbol(implicitThis, Decl(thisTypeInFunctions.ts, 5, 5))
>m : Symbol(m, Decl(thisTypeInFunctions.ts, 6, 17))

        return this.n + m;
>this.n : Symbol(n, Decl(thisTypeInFunctions.ts, 1, 9))
>this : Symbol(C, Decl(thisTypeInFunctions.ts, 0, 0))
>n : Symbol(n, Decl(thisTypeInFunctions.ts, 1, 9))
>m : Symbol(m, Decl(thisTypeInFunctions.ts, 6, 17))
    }
    explicitC(this: C, m: number): number {
>explicitC : Symbol(explicitC, Decl(thisTypeInFunctions.ts, 8, 5))
>this : Symbol(this, Decl(thisTypeInFunctions.ts, 9, 14))
>C : Symbol(C, Decl(thisTypeInFunctions.ts, 0, 0))
>m : Symbol(m, Decl(thisTypeInFunctions.ts, 9, 22))

        return this.n + m;
>this.n : Symbol(n, Decl(thisTypeInFunctions.ts, 1, 9))
>this : Symbol(C, Decl(thisTypeInFunctions.ts, 0, 0))
>n : Symbol(n, Decl(thisTypeInFunctions.ts, 1, 9))
>m : Symbol(m, Decl(thisTypeInFunctions.ts, 9, 22))
    }
    explicitProperty(this: {n: number}, m: number): number {
>explicitProperty : Symbol(explicitProperty, Decl(thisTypeInFunctions.ts, 11, 5))
>this : Symbol(this, Decl(thisTypeInFunctions.ts, 12, 21))
>n : Symbol(n, Decl(thisTypeInFunctions.ts, 12, 28))
>m : Symbol(m, Decl(thisTypeInFunctions.ts, 12, 39))

        return this.n + m;
>this.n : Symbol(n, Decl(thisTypeInFunctions.ts, 12, 28))
>this : Symbol(, Decl(thisTypeInFunctions.ts, 12, 26))
>n : Symbol(n, Decl(thisTypeInFunctions.ts, 12, 28))
>m : Symbol(m, Decl(thisTypeInFunctions.ts, 12, 39))
    }
    explicitVoid(this: void, m: number): number {
>explicitVoid : Symbol(explicitVoid, Decl(thisTypeInFunctions.ts, 14, 5))
>this : Symbol(this, Decl(thisTypeInFunctions.ts, 15, 17))
>m : Symbol(m, Decl(thisTypeInFunctions.ts, 15, 28))

        return m + 1;
>m : Symbol(m, Decl(thisTypeInFunctions.ts, 15, 28))
    }
}
class D extends C { }
>D : Symbol(D, Decl(thisTypeInFunctions.ts, 18, 1))
>C : Symbol(C, Decl(thisTypeInFunctions.ts, 0, 0))

class B {
>B : Symbol(B, Decl(thisTypeInFunctions.ts, 19, 21))

    n: number;
>n : Symbol(n, Decl(thisTypeInFunctions.ts, 20, 9))
}
interface I {
>I : Symbol(I, Decl(thisTypeInFunctions.ts, 22, 1))

    a: number;
>a : Symbol(a, Decl(thisTypeInFunctions.ts, 23, 13))

    explicitVoid1(this: void): number;
>explicitVoid1 : Symbol(explicitVoid1, Decl(thisTypeInFunctions.ts, 24, 14))
>this : Symbol(this, Decl(thisTypeInFunctions.ts, 25, 18))

    explicitVoid2(this: void): number;
>explicitVoid2 : Symbol(explicitVoid2, Decl(thisTypeInFunctions.ts, 25, 38))
>this : Symbol(this, Decl(thisTypeInFunctions.ts, 26, 18))

    explicitStructural(this: {a: number}): number;
>explicitStructural : Symbol(explicitStructural, Decl(thisTypeInFunctions.ts, 26, 38))
>this : Symbol(this, Decl(thisTypeInFunctions.ts, 27, 23))
>a : Symbol(a, Decl(thisTypeInFunctions.ts, 27, 30))

    explicitInterface(this: I): number;
>explicitInterface : Symbol(explicitInterface, Decl(thisTypeInFunctions.ts, 27, 50))
>this : Symbol(this, Decl(thisTypeInFunctions.ts, 28, 22))
>I : Symbol(I, Decl(thisTypeInFunctions.ts, 22, 1))

    // explicitThis(this: this): number; // TODO: Allow `this` types for interfaces
    implicitMethod(): number; // defaults to `this` :(
>implicitMethod : Symbol(implicitMethod, Decl(thisTypeInFunctions.ts, 28, 39))

    implicitFunction: () => number;
>implicitFunction : Symbol(implicitFunction, Decl(thisTypeInFunctions.ts, 30, 29))
}
function f(this: { y: number }, x: number): number {
>f : Symbol(f, Decl(thisTypeInFunctions.ts, 32, 1))
>this : Symbol(this, Decl(thisTypeInFunctions.ts, 33, 11))
>y : Symbol(y, Decl(thisTypeInFunctions.ts, 33, 18))
>x : Symbol(x, Decl(thisTypeInFunctions.ts, 33, 31))

    return x + this.y;
>x : Symbol(x, Decl(thisTypeInFunctions.ts, 33, 31))
>this.y : Symbol(y, Decl(thisTypeInFunctions.ts, 33, 18))
>this : Symbol(, Decl(thisTypeInFunctions.ts, 33, 16))
>y : Symbol(y, Decl(thisTypeInFunctions.ts, 33, 18))
}
function justThis(this: { y: number }): number {
>justThis : Symbol(justThis, Decl(thisTypeInFunctions.ts, 35, 1))
>this : Symbol(this, Decl(thisTypeInFunctions.ts, 36, 18))
>y : Symbol(y, Decl(thisTypeInFunctions.ts, 36, 25))

    return this.y;
>this.y : Symbol(y, Decl(thisTypeInFunctions.ts, 36, 25))
>this : Symbol(, Decl(thisTypeInFunctions.ts, 36, 23))
>y : Symbol(y, Decl(thisTypeInFunctions.ts, 36, 25))
}
function implicitThis(n: number): number {
>implicitThis : Symbol(implicitThis, Decl(thisTypeInFunctions.ts, 38, 1))
>n : Symbol(n, Decl(thisTypeInFunctions.ts, 39, 22))

    return 12;
}
let impl: I = {
>impl : Symbol(impl, Decl(thisTypeInFunctions.ts, 42, 3))
>I : Symbol(I, Decl(thisTypeInFunctions.ts, 22, 1))

    a: 12,
>a : Symbol(a, Decl(thisTypeInFunctions.ts, 42, 15))

    explicitVoid2: () => this.a, // ok, this: any because it refers to some outer object (window?)
>explicitVoid2 : Symbol(explicitVoid2, Decl(thisTypeInFunctions.ts, 43, 10))

    explicitVoid1() { return 12; },
>explicitVoid1 : Symbol(explicitVoid1, Decl(thisTypeInFunctions.ts, 44, 32))

    explicitStructural() {
>explicitStructural : Symbol(explicitStructural, Decl(thisTypeInFunctions.ts, 45, 35))

        return this.a;
>this.a : Symbol(a, Decl(thisTypeInFunctions.ts, 27, 30))
>this : Symbol(, Decl(thisTypeInFunctions.ts, 27, 28))
>a : Symbol(a, Decl(thisTypeInFunctions.ts, 27, 30))

    },
    explicitInterface() {
>explicitInterface : Symbol(explicitInterface, Decl(thisTypeInFunctions.ts, 48, 6))

        return this.a;
>this.a : Symbol(I.a, Decl(thisTypeInFunctions.ts, 23, 13))
>this : Symbol(I, Decl(thisTypeInFunctions.ts, 22, 1))
>a : Symbol(I.a, Decl(thisTypeInFunctions.ts, 23, 13))

    },
    //explicitThis() {
        //return this.a;
    //}
    implicitMethod() {
>implicitMethod : Symbol(implicitMethod, Decl(thisTypeInFunctions.ts, 51, 6))

        return this.a;
    },
    implicitFunction: () => this.a, // ok, this: any because it refers to some outer object (window?)
>implicitFunction : Symbol(implicitFunction, Decl(thisTypeInFunctions.ts, 57, 6))
}
impl.explicitVoid1 = function () { return 12; };
>impl.explicitVoid1 : Symbol(I.explicitVoid1, Decl(thisTypeInFunctions.ts, 24, 14))
>impl : Symbol(impl, Decl(thisTypeInFunctions.ts, 42, 3))
>explicitVoid1 : Symbol(I.explicitVoid1, Decl(thisTypeInFunctions.ts, 24, 14))

impl.explicitVoid2 = () => 12;
>impl.explicitVoid2 : Symbol(I.explicitVoid2, Decl(thisTypeInFunctions.ts, 25, 38))
>impl : Symbol(impl, Decl(thisTypeInFunctions.ts, 42, 3))
>explicitVoid2 : Symbol(I.explicitVoid2, Decl(thisTypeInFunctions.ts, 25, 38))

impl.explicitStructural = function() { return this.a; };
>impl.explicitStructural : Symbol(I.explicitStructural, Decl(thisTypeInFunctions.ts, 26, 38))
>impl : Symbol(impl, Decl(thisTypeInFunctions.ts, 42, 3))
>explicitStructural : Symbol(I.explicitStructural, Decl(thisTypeInFunctions.ts, 26, 38))
>this.a : Symbol(a, Decl(thisTypeInFunctions.ts, 27, 30))
>this : Symbol(, Decl(thisTypeInFunctions.ts, 27, 28))
>a : Symbol(a, Decl(thisTypeInFunctions.ts, 27, 30))

impl.explicitInterface = function() { return this.a; };
>impl.explicitInterface : Symbol(I.explicitInterface, Decl(thisTypeInFunctions.ts, 27, 50))
>impl : Symbol(impl, Decl(thisTypeInFunctions.ts, 42, 3))
>explicitInterface : Symbol(I.explicitInterface, Decl(thisTypeInFunctions.ts, 27, 50))
>this.a : Symbol(I.a, Decl(thisTypeInFunctions.ts, 23, 13))
>this : Symbol(I, Decl(thisTypeInFunctions.ts, 22, 1))
>a : Symbol(I.a, Decl(thisTypeInFunctions.ts, 23, 13))

impl.explicitStructural = () => 12;
>impl.explicitStructural : Symbol(I.explicitStructural, Decl(thisTypeInFunctions.ts, 26, 38))
>impl : Symbol(impl, Decl(thisTypeInFunctions.ts, 42, 3))
>explicitStructural : Symbol(I.explicitStructural, Decl(thisTypeInFunctions.ts, 26, 38))

impl.explicitInterface = () => 12;
>impl.explicitInterface : Symbol(I.explicitInterface, Decl(thisTypeInFunctions.ts, 27, 50))
>impl : Symbol(impl, Decl(thisTypeInFunctions.ts, 42, 3))
>explicitInterface : Symbol(I.explicitInterface, Decl(thisTypeInFunctions.ts, 27, 50))

// impl.explicitThis = function () { return this.a; };
impl.implicitMethod = function () { return this.a; };
>impl.implicitMethod : Symbol(I.implicitMethod, Decl(thisTypeInFunctions.ts, 28, 39))
>impl : Symbol(impl, Decl(thisTypeInFunctions.ts, 42, 3))
>implicitMethod : Symbol(I.implicitMethod, Decl(thisTypeInFunctions.ts, 28, 39))

impl.implicitFunction = function () { return this.a; }; // ok, this: any because it refers to some outer object (window?)
>impl.implicitFunction : Symbol(I.implicitFunction, Decl(thisTypeInFunctions.ts, 30, 29))
>impl : Symbol(impl, Decl(thisTypeInFunctions.ts, 42, 3))
>implicitFunction : Symbol(I.implicitFunction, Decl(thisTypeInFunctions.ts, 30, 29))

impl.implicitMethod = () => 12;
>impl.implicitMethod : Symbol(I.implicitMethod, Decl(thisTypeInFunctions.ts, 28, 39))
>impl : Symbol(impl, Decl(thisTypeInFunctions.ts, 42, 3))
>implicitMethod : Symbol(I.implicitMethod, Decl(thisTypeInFunctions.ts, 28, 39))

impl.implicitFunction = () => 12;
>impl.implicitFunction : Symbol(I.implicitFunction, Decl(thisTypeInFunctions.ts, 30, 29))
>impl : Symbol(impl, Decl(thisTypeInFunctions.ts, 42, 3))
>implicitFunction : Symbol(I.implicitFunction, Decl(thisTypeInFunctions.ts, 30, 29))

// parameter checking
let ok: {y: number, f: (this: { y: number }, x: number) => number} = { y: 12, f };
>ok : Symbol(ok, Decl(thisTypeInFunctions.ts, 72, 3))
>y : Symbol(y, Decl(thisTypeInFunctions.ts, 72, 9))
>f : Symbol(f, Decl(thisTypeInFunctions.ts, 72, 19))
>this : Symbol(this, Decl(thisTypeInFunctions.ts, 72, 24))
>y : Symbol(y, Decl(thisTypeInFunctions.ts, 72, 31))
>x : Symbol(x, Decl(thisTypeInFunctions.ts, 72, 44))
>y : Symbol(y, Decl(thisTypeInFunctions.ts, 72, 70))
>f : Symbol(f, Decl(thisTypeInFunctions.ts, 72, 77))

let implicitAnyOk: {notSpecified: number, f: (x: number) => number} = { notSpecified: 12, f: implicitThis };
>implicitAnyOk : Symbol(implicitAnyOk, Decl(thisTypeInFunctions.ts, 73, 3))
>notSpecified : Symbol(notSpecified, Decl(thisTypeInFunctions.ts, 73, 20))
>f : Symbol(f, Decl(thisTypeInFunctions.ts, 73, 41))
>x : Symbol(x, Decl(thisTypeInFunctions.ts, 73, 46))
>notSpecified : Symbol(notSpecified, Decl(thisTypeInFunctions.ts, 73, 71))
>f : Symbol(f, Decl(thisTypeInFunctions.ts, 73, 89))
>implicitThis : Symbol(implicitThis, Decl(thisTypeInFunctions.ts, 38, 1))

ok.f(13);
>ok.f : Symbol(f, Decl(thisTypeInFunctions.ts, 72, 19))
>ok : Symbol(ok, Decl(thisTypeInFunctions.ts, 72, 3))
>f : Symbol(f, Decl(thisTypeInFunctions.ts, 72, 19))

implicitThis(12);
>implicitThis : Symbol(implicitThis, Decl(thisTypeInFunctions.ts, 38, 1))

implicitAnyOk.f(12);
>implicitAnyOk.f : Symbol(f, Decl(thisTypeInFunctions.ts, 73, 41))
>implicitAnyOk : Symbol(implicitAnyOk, Decl(thisTypeInFunctions.ts, 73, 3))
>f : Symbol(f, Decl(thisTypeInFunctions.ts, 73, 41))

let c = new C();
>c : Symbol(c, Decl(thisTypeInFunctions.ts, 78, 3))
>C : Symbol(C, Decl(thisTypeInFunctions.ts, 0, 0))

let d = new D();
>d : Symbol(d, Decl(thisTypeInFunctions.ts, 79, 3))
>D : Symbol(D, Decl(thisTypeInFunctions.ts, 18, 1))

let ripped = c.explicitC;
>ripped : Symbol(ripped, Decl(thisTypeInFunctions.ts, 80, 3))
>c.explicitC : Symbol(C.explicitC, Decl(thisTypeInFunctions.ts, 8, 5))
>c : Symbol(c, Decl(thisTypeInFunctions.ts, 78, 3))
>explicitC : Symbol(C.explicitC, Decl(thisTypeInFunctions.ts, 8, 5))

c.explicitC(12);
>c.explicitC : Symbol(C.explicitC, Decl(thisTypeInFunctions.ts, 8, 5))
>c : Symbol(c, Decl(thisTypeInFunctions.ts, 78, 3))
>explicitC : Symbol(C.explicitC, Decl(thisTypeInFunctions.ts, 8, 5))

c.explicitProperty(12);
>c.explicitProperty : Symbol(C.explicitProperty, Decl(thisTypeInFunctions.ts, 11, 5))
>c : Symbol(c, Decl(thisTypeInFunctions.ts, 78, 3))
>explicitProperty : Symbol(C.explicitProperty, Decl(thisTypeInFunctions.ts, 11, 5))

c.explicitThis(12);
>c.explicitThis : Symbol(C.explicitThis, Decl(thisTypeInFunctions.ts, 2, 14))
>c : Symbol(c, Decl(thisTypeInFunctions.ts, 78, 3))
>explicitThis : Symbol(C.explicitThis, Decl(thisTypeInFunctions.ts, 2, 14))

c.implicitThis(12);
>c.implicitThis : Symbol(C.implicitThis, Decl(thisTypeInFunctions.ts, 5, 5))
>c : Symbol(c, Decl(thisTypeInFunctions.ts, 78, 3))
>implicitThis : Symbol(C.implicitThis, Decl(thisTypeInFunctions.ts, 5, 5))

d.explicitC(12);
>d.explicitC : Symbol(C.explicitC, Decl(thisTypeInFunctions.ts, 8, 5))
>d : Symbol(d, Decl(thisTypeInFunctions.ts, 79, 3))
>explicitC : Symbol(C.explicitC, Decl(thisTypeInFunctions.ts, 8, 5))

d.explicitProperty(12);
>d.explicitProperty : Symbol(C.explicitProperty, Decl(thisTypeInFunctions.ts, 11, 5))
>d : Symbol(d, Decl(thisTypeInFunctions.ts, 79, 3))
>explicitProperty : Symbol(C.explicitProperty, Decl(thisTypeInFunctions.ts, 11, 5))

d.explicitThis(12);
>d.explicitThis : Symbol(C.explicitThis, Decl(thisTypeInFunctions.ts, 2, 14))
>d : Symbol(d, Decl(thisTypeInFunctions.ts, 79, 3))
>explicitThis : Symbol(C.explicitThis, Decl(thisTypeInFunctions.ts, 2, 14))

d.implicitThis(12);
>d.implicitThis : Symbol(C.implicitThis, Decl(thisTypeInFunctions.ts, 5, 5))
>d : Symbol(d, Decl(thisTypeInFunctions.ts, 79, 3))
>implicitThis : Symbol(C.implicitThis, Decl(thisTypeInFunctions.ts, 5, 5))

let reconstructed: { 
>reconstructed : Symbol(reconstructed, Decl(thisTypeInFunctions.ts, 89, 3))

    explicitProperty: (this: {n : number}, m: number) => number,
>explicitProperty : Symbol(explicitProperty, Decl(thisTypeInFunctions.ts, 89, 20))
>this : Symbol(this, Decl(thisTypeInFunctions.ts, 90, 23))
>n : Symbol(n, Decl(thisTypeInFunctions.ts, 90, 30))
>m : Symbol(m, Decl(thisTypeInFunctions.ts, 90, 42))

    implicitThis: (m: number) => number,
>implicitThis : Symbol(implicitThis, Decl(thisTypeInFunctions.ts, 90, 64))
>m : Symbol(m, Decl(thisTypeInFunctions.ts, 91, 19))

    n: number,
>n : Symbol(n, Decl(thisTypeInFunctions.ts, 91, 40))

} = { 
    explicitProperty: c.explicitProperty, 
>explicitProperty : Symbol(explicitProperty, Decl(thisTypeInFunctions.ts, 93, 5))
>c.explicitProperty : Symbol(C.explicitProperty, Decl(thisTypeInFunctions.ts, 11, 5))
>c : Symbol(c, Decl(thisTypeInFunctions.ts, 78, 3))
>explicitProperty : Symbol(C.explicitProperty, Decl(thisTypeInFunctions.ts, 11, 5))

    implicitThis: c.implicitThis,
>implicitThis : Symbol(implicitThis, Decl(thisTypeInFunctions.ts, 94, 41))
>c.implicitThis : Symbol(C.implicitThis, Decl(thisTypeInFunctions.ts, 5, 5))
>c : Symbol(c, Decl(thisTypeInFunctions.ts, 78, 3))
>implicitThis : Symbol(C.implicitThis, Decl(thisTypeInFunctions.ts, 5, 5))

    n: 12 
>n : Symbol(n, Decl(thisTypeInFunctions.ts, 95, 33))

};
reconstructed.explicitProperty(11);
>reconstructed.explicitProperty : Symbol(explicitProperty, Decl(thisTypeInFunctions.ts, 89, 20))
>reconstructed : Symbol(reconstructed, Decl(thisTypeInFunctions.ts, 89, 3))
>explicitProperty : Symbol(explicitProperty, Decl(thisTypeInFunctions.ts, 89, 20))

reconstructed.implicitThis(11);
>reconstructed.implicitThis : Symbol(implicitThis, Decl(thisTypeInFunctions.ts, 90, 64))
>reconstructed : Symbol(reconstructed, Decl(thisTypeInFunctions.ts, 89, 3))
>implicitThis : Symbol(implicitThis, Decl(thisTypeInFunctions.ts, 90, 64))

// assignment checking
let specifiedToAny: (x: number) => number = f;
>specifiedToAny : Symbol(specifiedToAny, Decl(thisTypeInFunctions.ts, 102, 3))
>x : Symbol(x, Decl(thisTypeInFunctions.ts, 102, 21))
>f : Symbol(f, Decl(thisTypeInFunctions.ts, 32, 1))

let specifiedToSpecified: (this: {y: number}, x: number) => number = f;
>specifiedToSpecified : Symbol(specifiedToSpecified, Decl(thisTypeInFunctions.ts, 103, 3))
>this : Symbol(this, Decl(thisTypeInFunctions.ts, 103, 27))
>y : Symbol(y, Decl(thisTypeInFunctions.ts, 103, 34))
>x : Symbol(x, Decl(thisTypeInFunctions.ts, 103, 45))
>f : Symbol(f, Decl(thisTypeInFunctions.ts, 32, 1))

let anyToSpecified: (this: { y: number }, x: number) => number = function(x: number): number { return x + 12; };
>anyToSpecified : Symbol(anyToSpecified, Decl(thisTypeInFunctions.ts, 104, 3))
>this : Symbol(this, Decl(thisTypeInFunctions.ts, 104, 21))
>y : Symbol(y, Decl(thisTypeInFunctions.ts, 104, 28))
>x : Symbol(x, Decl(thisTypeInFunctions.ts, 104, 41))
>x : Symbol(x, Decl(thisTypeInFunctions.ts, 104, 74))
>x : Symbol(x, Decl(thisTypeInFunctions.ts, 104, 74))

let unspecifiedLambda: (x: number) => number = x => x + 12;
>unspecifiedLambda : Symbol(unspecifiedLambda, Decl(thisTypeInFunctions.ts, 106, 3))
>x : Symbol(x, Decl(thisTypeInFunctions.ts, 106, 24))
>x : Symbol(x, Decl(thisTypeInFunctions.ts, 106, 46))
>x : Symbol(x, Decl(thisTypeInFunctions.ts, 106, 46))

let specifiedLambda: (this: void, x: number) => number = x => x + 12;
>specifiedLambda : Symbol(specifiedLambda, Decl(thisTypeInFunctions.ts, 107, 3))
>this : Symbol(this, Decl(thisTypeInFunctions.ts, 107, 22))
>x : Symbol(x, Decl(thisTypeInFunctions.ts, 107, 33))
>x : Symbol(x, Decl(thisTypeInFunctions.ts, 107, 56))
>x : Symbol(x, Decl(thisTypeInFunctions.ts, 107, 56))

let unspecifiedLambdaToSpecified: (this: {y: number}, x: number) => number = unspecifiedLambda;
>unspecifiedLambdaToSpecified : Symbol(unspecifiedLambdaToSpecified, Decl(thisTypeInFunctions.ts, 108, 3))
>this : Symbol(this, Decl(thisTypeInFunctions.ts, 108, 35))
>y : Symbol(y, Decl(thisTypeInFunctions.ts, 108, 42))
>x : Symbol(x, Decl(thisTypeInFunctions.ts, 108, 53))
>unspecifiedLambda : Symbol(unspecifiedLambda, Decl(thisTypeInFunctions.ts, 106, 3))



let explicitCFunction: (this: C, m: number) => number;
>explicitCFunction : Symbol(explicitCFunction, Decl(thisTypeInFunctions.ts, 112, 3))
>this : Symbol(this, Decl(thisTypeInFunctions.ts, 112, 24))
>C : Symbol(C, Decl(thisTypeInFunctions.ts, 0, 0))
>m : Symbol(m, Decl(thisTypeInFunctions.ts, 112, 32))

let explicitPropertyFunction: (this: {n: number}, m: number) => number;
>explicitPropertyFunction : Symbol(explicitPropertyFunction, Decl(thisTypeInFunctions.ts, 113, 3))
>this : Symbol(this, Decl(thisTypeInFunctions.ts, 113, 31))
>n : Symbol(n, Decl(thisTypeInFunctions.ts, 113, 38))
>m : Symbol(m, Decl(thisTypeInFunctions.ts, 113, 49))

c.explicitC = explicitCFunction;
>c.explicitC : Symbol(C.explicitC, Decl(thisTypeInFunctions.ts, 8, 5))
>c : Symbol(c, Decl(thisTypeInFunctions.ts, 78, 3))
>explicitC : Symbol(C.explicitC, Decl(thisTypeInFunctions.ts, 8, 5))
>explicitCFunction : Symbol(explicitCFunction, Decl(thisTypeInFunctions.ts, 112, 3))

c.explicitC = function(this: C, m: number) { return this.n + m };
>c.explicitC : Symbol(C.explicitC, Decl(thisTypeInFunctions.ts, 8, 5))
>c : Symbol(c, Decl(thisTypeInFunctions.ts, 78, 3))
>explicitC : Symbol(C.explicitC, Decl(thisTypeInFunctions.ts, 8, 5))
>this : Symbol(this, Decl(thisTypeInFunctions.ts, 115, 23))
>C : Symbol(C, Decl(thisTypeInFunctions.ts, 0, 0))
>m : Symbol(m, Decl(thisTypeInFunctions.ts, 115, 31))
>this.n : Symbol(C.n, Decl(thisTypeInFunctions.ts, 1, 9))
>this : Symbol(C, Decl(thisTypeInFunctions.ts, 0, 0))
>n : Symbol(C.n, Decl(thisTypeInFunctions.ts, 1, 9))
>m : Symbol(m, Decl(thisTypeInFunctions.ts, 115, 31))

c.explicitProperty = explicitPropertyFunction;
>c.explicitProperty : Symbol(C.explicitProperty, Decl(thisTypeInFunctions.ts, 11, 5))
>c : Symbol(c, Decl(thisTypeInFunctions.ts, 78, 3))
>explicitProperty : Symbol(C.explicitProperty, Decl(thisTypeInFunctions.ts, 11, 5))
>explicitPropertyFunction : Symbol(explicitPropertyFunction, Decl(thisTypeInFunctions.ts, 113, 3))

c.explicitProperty = function(this: {n: number}, m: number) { return this.n + m };
>c.explicitProperty : Symbol(C.explicitProperty, Decl(thisTypeInFunctions.ts, 11, 5))
>c : Symbol(c, Decl(thisTypeInFunctions.ts, 78, 3))
>explicitProperty : Symbol(C.explicitProperty, Decl(thisTypeInFunctions.ts, 11, 5))
>this : Symbol(this, Decl(thisTypeInFunctions.ts, 117, 30))
>n : Symbol(n, Decl(thisTypeInFunctions.ts, 117, 37))
>m : Symbol(m, Decl(thisTypeInFunctions.ts, 117, 48))
>this.n : Symbol(n, Decl(thisTypeInFunctions.ts, 117, 37))
>this : Symbol(, Decl(thisTypeInFunctions.ts, 117, 35))
>n : Symbol(n, Decl(thisTypeInFunctions.ts, 117, 37))
>m : Symbol(m, Decl(thisTypeInFunctions.ts, 117, 48))

c.explicitProperty = reconstructed.explicitProperty;
>c.explicitProperty : Symbol(C.explicitProperty, Decl(thisTypeInFunctions.ts, 11, 5))
>c : Symbol(c, Decl(thisTypeInFunctions.ts, 78, 3))
>explicitProperty : Symbol(C.explicitProperty, Decl(thisTypeInFunctions.ts, 11, 5))
>reconstructed.explicitProperty : Symbol(explicitProperty, Decl(thisTypeInFunctions.ts, 89, 20))
>reconstructed : Symbol(reconstructed, Decl(thisTypeInFunctions.ts, 89, 3))
>explicitProperty : Symbol(explicitProperty, Decl(thisTypeInFunctions.ts, 89, 20))

//NOTE: this=C here, I guess?
c.explicitThis = explicitCFunction;
>c.explicitThis : Symbol(C.explicitThis, Decl(thisTypeInFunctions.ts, 2, 14))
>c : Symbol(c, Decl(thisTypeInFunctions.ts, 78, 3))
>explicitThis : Symbol(C.explicitThis, Decl(thisTypeInFunctions.ts, 2, 14))
>explicitCFunction : Symbol(explicitCFunction, Decl(thisTypeInFunctions.ts, 112, 3))

c.explicitThis = function(this: C, m: number) { return this.n + m };
>c.explicitThis : Symbol(C.explicitThis, Decl(thisTypeInFunctions.ts, 2, 14))
>c : Symbol(c, Decl(thisTypeInFunctions.ts, 78, 3))
>explicitThis : Symbol(C.explicitThis, Decl(thisTypeInFunctions.ts, 2, 14))
>this : Symbol(this, Decl(thisTypeInFunctions.ts, 122, 26))
>C : Symbol(C, Decl(thisTypeInFunctions.ts, 0, 0))
>m : Symbol(m, Decl(thisTypeInFunctions.ts, 122, 34))
>this.n : Symbol(C.n, Decl(thisTypeInFunctions.ts, 1, 9))
>this : Symbol(C, Decl(thisTypeInFunctions.ts, 0, 0))
>n : Symbol(C.n, Decl(thisTypeInFunctions.ts, 1, 9))
>m : Symbol(m, Decl(thisTypeInFunctions.ts, 122, 34))

// this:any compatibility
c.explicitC = function(m: number) { return this.n + m };
>c.explicitC : Symbol(C.explicitC, Decl(thisTypeInFunctions.ts, 8, 5))
>c : Symbol(c, Decl(thisTypeInFunctions.ts, 78, 3))
>explicitC : Symbol(C.explicitC, Decl(thisTypeInFunctions.ts, 8, 5))
>m : Symbol(m, Decl(thisTypeInFunctions.ts, 125, 23))
>m : Symbol(m, Decl(thisTypeInFunctions.ts, 125, 23))

c.explicitProperty = function(m: number) { return this.n + m };
>c.explicitProperty : Symbol(C.explicitProperty, Decl(thisTypeInFunctions.ts, 11, 5))
>c : Symbol(c, Decl(thisTypeInFunctions.ts, 78, 3))
>explicitProperty : Symbol(C.explicitProperty, Decl(thisTypeInFunctions.ts, 11, 5))
>m : Symbol(m, Decl(thisTypeInFunctions.ts, 126, 30))
>m : Symbol(m, Decl(thisTypeInFunctions.ts, 126, 30))

c.explicitThis = function(m: number) { return this.n + m };
>c.explicitThis : Symbol(C.explicitThis, Decl(thisTypeInFunctions.ts, 2, 14))
>c : Symbol(c, Decl(thisTypeInFunctions.ts, 78, 3))
>explicitThis : Symbol(C.explicitThis, Decl(thisTypeInFunctions.ts, 2, 14))
>m : Symbol(m, Decl(thisTypeInFunctions.ts, 127, 26))
>m : Symbol(m, Decl(thisTypeInFunctions.ts, 127, 26))

c.implicitThis = function(m: number) { return this.n + m };
>c.implicitThis : Symbol(C.implicitThis, Decl(thisTypeInFunctions.ts, 5, 5))
>c : Symbol(c, Decl(thisTypeInFunctions.ts, 78, 3))
>implicitThis : Symbol(C.implicitThis, Decl(thisTypeInFunctions.ts, 5, 5))
>m : Symbol(m, Decl(thisTypeInFunctions.ts, 128, 26))
>m : Symbol(m, Decl(thisTypeInFunctions.ts, 128, 26))

c.implicitThis = reconstructed.implicitThis;
>c.implicitThis : Symbol(C.implicitThis, Decl(thisTypeInFunctions.ts, 5, 5))
>c : Symbol(c, Decl(thisTypeInFunctions.ts, 78, 3))
>implicitThis : Symbol(C.implicitThis, Decl(thisTypeInFunctions.ts, 5, 5))
>reconstructed.implicitThis : Symbol(implicitThis, Decl(thisTypeInFunctions.ts, 90, 64))
>reconstructed : Symbol(reconstructed, Decl(thisTypeInFunctions.ts, 89, 3))
>implicitThis : Symbol(implicitThis, Decl(thisTypeInFunctions.ts, 90, 64))

c.explicitC = function(this: B, m: number) { return this.n + m };
>c.explicitC : Symbol(C.explicitC, Decl(thisTypeInFunctions.ts, 8, 5))
>c : Symbol(c, Decl(thisTypeInFunctions.ts, 78, 3))
>explicitC : Symbol(C.explicitC, Decl(thisTypeInFunctions.ts, 8, 5))
>this : Symbol(this, Decl(thisTypeInFunctions.ts, 131, 23))
>B : Symbol(B, Decl(thisTypeInFunctions.ts, 19, 21))
>m : Symbol(m, Decl(thisTypeInFunctions.ts, 131, 31))
>this.n : Symbol(B.n, Decl(thisTypeInFunctions.ts, 20, 9))
>this : Symbol(B, Decl(thisTypeInFunctions.ts, 19, 21))
>n : Symbol(B.n, Decl(thisTypeInFunctions.ts, 20, 9))
>m : Symbol(m, Decl(thisTypeInFunctions.ts, 131, 31))

// this:void compatibility
c.explicitVoid = n => n;
>c.explicitVoid : Symbol(C.explicitVoid, Decl(thisTypeInFunctions.ts, 14, 5))
>c : Symbol(c, Decl(thisTypeInFunctions.ts, 78, 3))
>explicitVoid : Symbol(C.explicitVoid, Decl(thisTypeInFunctions.ts, 14, 5))
>n : Symbol(n, Decl(thisTypeInFunctions.ts, 134, 16))
>n : Symbol(n, Decl(thisTypeInFunctions.ts, 134, 16))

