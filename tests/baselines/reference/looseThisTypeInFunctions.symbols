=== tests/cases/conformance/types/thisType/looseThisTypeInFunctions.ts ===
interface I {
>I : Symbol(I, Decl(looseThisTypeInFunctions.ts, 0, 0))

    explicitThis(this: this, m: number): number;
>explicitThis : Symbol(explicitThis, Decl(looseThisTypeInFunctions.ts, 0, 13))
>this : Symbol(this, Decl(looseThisTypeInFunctions.ts, 1, 17))
>m : Symbol(m, Decl(looseThisTypeInFunctions.ts, 1, 28))
}
class C implements I {
>C : Symbol(C, Decl(looseThisTypeInFunctions.ts, 2, 1))
>I : Symbol(I, Decl(looseThisTypeInFunctions.ts, 0, 0))

    n: number;
>n : Symbol(n, Decl(looseThisTypeInFunctions.ts, 3, 22))

    explicitThis(this: this, m: number): number {
>explicitThis : Symbol(explicitThis, Decl(looseThisTypeInFunctions.ts, 4, 14))
>this : Symbol(this, Decl(looseThisTypeInFunctions.ts, 5, 17))
>m : Symbol(m, Decl(looseThisTypeInFunctions.ts, 5, 28))

        return this.n + m;
>this.n : Symbol(n, Decl(looseThisTypeInFunctions.ts, 3, 22))
>n : Symbol(n, Decl(looseThisTypeInFunctions.ts, 3, 22))
>m : Symbol(m, Decl(looseThisTypeInFunctions.ts, 5, 28))
    }
    implicitThis(m: number): number {
>implicitThis : Symbol(implicitThis, Decl(looseThisTypeInFunctions.ts, 7, 5))
>m : Symbol(m, Decl(looseThisTypeInFunctions.ts, 8, 17))

        return this.n + m;
>this.n : Symbol(n, Decl(looseThisTypeInFunctions.ts, 3, 22))
>n : Symbol(n, Decl(looseThisTypeInFunctions.ts, 3, 22))
>m : Symbol(m, Decl(looseThisTypeInFunctions.ts, 8, 17))
    }
    explicitVoid(this: void, m: number): number {
>explicitVoid : Symbol(explicitVoid, Decl(looseThisTypeInFunctions.ts, 10, 5))
>this : Symbol(this, Decl(looseThisTypeInFunctions.ts, 11, 17))
>m : Symbol(m, Decl(looseThisTypeInFunctions.ts, 11, 28))

        return m + 1;
>m : Symbol(m, Decl(looseThisTypeInFunctions.ts, 11, 28))
    }
}
let c = new C();
>c : Symbol(c, Decl(looseThisTypeInFunctions.ts, 15, 3))
>C : Symbol(C, Decl(looseThisTypeInFunctions.ts, 2, 1))

// c.explicitVoid = c.explicitThis; // error, 'void' is missing everything
let o = { 
>o : Symbol(o, Decl(looseThisTypeInFunctions.ts, 17, 3))

    explicitThis: function (m) { return m },
>explicitThis : Symbol(explicitThis, Decl(looseThisTypeInFunctions.ts, 17, 9))
>m : Symbol(m, Decl(looseThisTypeInFunctions.ts, 18, 28))
>m : Symbol(m, Decl(looseThisTypeInFunctions.ts, 18, 28))

	implicitThis(m: number): number { return m } 
>implicitThis : Symbol(implicitThis, Decl(looseThisTypeInFunctions.ts, 18, 44))
>m : Symbol(m, Decl(looseThisTypeInFunctions.ts, 19, 14))
>m : Symbol(m, Decl(looseThisTypeInFunctions.ts, 19, 14))

};
let i: I = o;
>i : Symbol(i, Decl(looseThisTypeInFunctions.ts, 21, 3))
>I : Symbol(I, Decl(looseThisTypeInFunctions.ts, 0, 0))
>o : Symbol(o, Decl(looseThisTypeInFunctions.ts, 17, 3))

c.explicitVoid = c.implicitThis // ok, implicitThis(this:any)
>c.explicitVoid : Symbol(C.explicitVoid, Decl(looseThisTypeInFunctions.ts, 10, 5))
>c : Symbol(c, Decl(looseThisTypeInFunctions.ts, 15, 3))
>explicitVoid : Symbol(C.explicitVoid, Decl(looseThisTypeInFunctions.ts, 10, 5))
>c.implicitThis : Symbol(C.implicitThis, Decl(looseThisTypeInFunctions.ts, 7, 5))
>c : Symbol(c, Decl(looseThisTypeInFunctions.ts, 15, 3))
>implicitThis : Symbol(C.implicitThis, Decl(looseThisTypeInFunctions.ts, 7, 5))

o.implicitThis = c.implicitThis; // ok, implicitThis(this:any)
>o.implicitThis : Symbol(implicitThis, Decl(looseThisTypeInFunctions.ts, 18, 44))
>o : Symbol(o, Decl(looseThisTypeInFunctions.ts, 17, 3))
>implicitThis : Symbol(implicitThis, Decl(looseThisTypeInFunctions.ts, 18, 44))
>c.implicitThis : Symbol(C.implicitThis, Decl(looseThisTypeInFunctions.ts, 7, 5))
>c : Symbol(c, Decl(looseThisTypeInFunctions.ts, 15, 3))
>implicitThis : Symbol(C.implicitThis, Decl(looseThisTypeInFunctions.ts, 7, 5))

o.implicitThis = c.explicitThis; // ok, implicitThis(this:any) is assignable to explicitThis(this: this)
>o.implicitThis : Symbol(implicitThis, Decl(looseThisTypeInFunctions.ts, 18, 44))
>o : Symbol(o, Decl(looseThisTypeInFunctions.ts, 17, 3))
>implicitThis : Symbol(implicitThis, Decl(looseThisTypeInFunctions.ts, 18, 44))
>c.explicitThis : Symbol(C.explicitThis, Decl(looseThisTypeInFunctions.ts, 4, 14))
>c : Symbol(c, Decl(looseThisTypeInFunctions.ts, 15, 3))
>explicitThis : Symbol(C.explicitThis, Decl(looseThisTypeInFunctions.ts, 4, 14))

o.implicitThis = i.explicitThis;
>o.implicitThis : Symbol(implicitThis, Decl(looseThisTypeInFunctions.ts, 18, 44))
>o : Symbol(o, Decl(looseThisTypeInFunctions.ts, 17, 3))
>implicitThis : Symbol(implicitThis, Decl(looseThisTypeInFunctions.ts, 18, 44))
>i.explicitThis : Symbol(I.explicitThis, Decl(looseThisTypeInFunctions.ts, 0, 13))
>i : Symbol(i, Decl(looseThisTypeInFunctions.ts, 21, 3))
>explicitThis : Symbol(I.explicitThis, Decl(looseThisTypeInFunctions.ts, 0, 13))

